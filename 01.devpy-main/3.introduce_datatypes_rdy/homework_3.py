#!"C:\devops-36\puthon312\python.exe

""" Задача №1 Мы делаем MVP dating-сервиса, и у нас есть список парней и девушек (их число может варьироваться):
boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

Выдвигаем гипотезу: лучшие рекомендации мы получим, если просто отсортируем имена по алфавиту и познакомим людей с
одинаковыми индексами после сортировки! "Познакомить" пары нам поможет функция `zip`, а в цикле распакуем zip-объект и
выведем информацию в виде:

Идеальные пары:
Alex и Emma
Arthur и Kate
John и Kira
Peter и Liza
Richard и Trisha

**Внимание! Если количество людей в списках будет не совпадать, то мы никого знакомить не будем и выведем пользователю
предупреждение, что кто-то может остаться без пары!**
"""


def bg():
	boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
	girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']
	# girls = ['Kate', 'Liza', 'Kira', 'Emma']

	# однострок ТОЛЬКО в python312+
	print(f'Пары:\n{'\n'.join((map(str, list(zip(sorted(boys), sorted(girls)))))).replace(',', ' и').replace("'", '')}' if len(boys) == len(girls) else f'Нет пары')

	if len(boys) == len(girls):
		# через зип
		abg = list(zip(sorted(boys), sorted(girls)))
		print("Пары:")
		for boy, girl in abg:
			print(f'{boy} и {girl}')

		# через tuple (не универсально)
		bbg = (sorted(boys), sorted(girls))
		print("Пары:")
		# for b in range(sum([len(i) for i in bbg]) // 2):
		for b in range(len(boys)):
			print(f'{bbg[0][b]} и {bbg[1][b]}')
	else:
		print('\033[91m' + "Кто-то без пары" + '\033[0m')
	print()
	return


bg()

"""
## Задача №2
Имеется структура данных `cook_book`, в которой хранится информация об ингредиентах блюд и их количестве в расчете на одну порцию:
```
cook_book = [
	['салат',
      [
        ['картофель', 100, 'гр.'],
        ['морковь', 50, 'гр.'],
        ['огурцы', 50, 'гр.'],
        ['горошек', 30, 'гр.'],
        ['майонез', 70, 'мл.'],
      ]
  ],
	['пицца',  
      [
        ['сыр', 50, 'гр.'],
        ['томаты', 50, 'гр.'],
        ['тесто', 100, 'гр.'],
        ['бекон', 30, 'гр.'],
        ['колбаса', 30, 'гр.'],
        ['грибы', 20, 'гр.'],
      ],
  ],
  ['фруктовый десерт',
      [
        ['хурма', 60, 'гр.'],
        ['киви', 60, 'гр.'],
        ['творог', 60, 'гр.'],
        ['сахар', 10, 'гр.'],
        ['мед', 50, 'мл.'],  
      ]
  ]
]
```    
и переменная, в которой хранится количество людей, на которых необходимо приготовить данные блюда:
```
person = 5
```

Необходимо вывести пользователю список покупок необходимого количества ингредиентов для приготовления блюд на определенное число персон в следующем виде:

```
Салат:
картофель, 500гр.
морковь, 250гр.
огурцы, 250гр.
горошек, 150гр.
майонез, 350мл.

Пицца:
сыр, 250гр.
томаты, 250гр.
тесто, 500гр.
бекон, 150гр.
колбаса, 150гр.
грибы, 100гр.

Фруктовый десерт:
хурма, 300гр.
киви, 300гр.
творог, 300гр.
сахар, 50гр.
мед, 250мл.
```
**Внимание! Реализация не должна зависеть от количества блюд, их названий и количества ингредиентов в них!**
"""


def cook(person):
	cook_book = [
		['салат',
			[
				['картофель', 100, 'гр.'],
				['морковь', 50, 'гр.'],
				['огурцы', 50, 'гр.'],
				['горошек', 30, 'гр.'],
				['майонез', 70, 'мл.'],
			]
		],
		['пицца',
			[
				['сыр', 50, 'гр.'],
				['томаты', 50, 'гр.'],
				['тесто', 100, 'гр.'],
				['бекон', 30, 'гр.'],
				['колбаса', 30, 'гр.'],
				['грибы', 20, 'гр.'],
			],
		],
		['фруктовый десерт',
			[
				['хурма', 60, 'гр.'],
				['киви', 60, 'гр.'],
				['творог', 60, 'гр.'],
				['сахар', 10, 'гр.'],
				['мед', 50, 'мл.'],
			],
		],
		['фруктовый десерт2',
			[
				['яблоко', 70, 'гр.'],
				['банан', 40, 'гр.'],
				['марцепан', 200, 'гр.'],
				['кокосовая стружка', 25, 'гр.'],
				['йогурт', 300, 'мл.'],
			]
		]
	]

	for bludo_n, recipe in cook_book:
		print(f'\n{bludo_n}:')
		for ingrids, count, abbr in recipe:
			print(f'{ingrids}, {count*person}{abbr}')

	print(f'\nКонтроль количества рецептов: {len(cook_book)}')
	return


person = int(input('Введите кол-во гостей (default 5): ') or '5')
cook(person)

"""Universal перебор списка
companies = [
	['xx', 1],
	['yy', 0.5],
	['zz', 2, 'можно неровные списки использовать']
]

for company in companies:
print(f' {company[0] capitalization {company[1]}')"""