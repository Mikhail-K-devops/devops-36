Yandex Cloud CLI 0.116.0 linux/amd64
curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh install.sh | bash
#vlan create
yc vpc network create --name vlan01 --labels my-label=netology --description "MainVLAN"
#list images in yc
yc compute image list
yc compute image delete fd8uih8384p72e3f02da
yc vpc subnet create --name vlan01-ru1-a --zone ru-central1-a --range 10.1.2.0/24 --network-name vlan01 --description "MainVLAN-subnet"


sudo -E sh -c 'echo "YC_FOLDER_ID=$YC_FOLDER_ID" >> 1.sh && echo "YC_ZONE=$YC_ZONE" >> 1.sh && echo "YC_SUBNET_ID=$YC_SUBNET_ID" >> 1.sh && echo "YC_TOKEN=$YC_TOKEN" >> 1.sh'

cat ~/.bash_history - история консоли

sudo mkdir ~/mounthome && sudo mount -t vboxsf share ~/mounthome
sudo mount -t cifs //192.168.56.102/_git_devops ~/mountpoint1 -o username=u3buhu@ya.ru,password=xxxxxxxx - Samba
sudo apt install cifs-utils - CIFS
sudo mount.cifs -v //192.168.56.103/_git_devops ~/mountpoint3 --verbose -o user=u3buhu@ya.ru,password=Exxxxxxx,domain=Jinhae-PC
sudo mount.cifs -v //192.168.56.102/devops-36 ~/mountpoint2 --verbose -o user=u3buhu@ya.ru,password=Exxxxxxxxx,domain=Jinhae-PC


sudo timedatectl set-timezone Europe/Moscow

apt-cache policy package_name
sudo apt install package_name=version
sudo apt update && sudo apt upgrade -y
sudo ip link set enp0s8 up
/etc/   netplan/01-netcfg.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s8:
      dhcp4: true

sudo netplan apply
sudo nano ~/.ssh/authorized_keys -- сюда скопировать содержимое .pub из хост машины ~/.ssh/*.pub
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
--
ssh vagrant@192.168.56.101 -i ~/.ssh/whome
sudo lvextend -r -l +100%FREE /dev/ubuntu-vg/ubuntu-lv - увеличение раздела (sudo pvs sudo lvs)

#Install and setup

apt-cache policy <packageName> - просмотр доступных версий пакетов
apt policy <packageName> - установка с выбором версии

pip3 isntall ansible - установка по через pyton установочник, позволяет поставить ансибл версии 2.10+

внесение изменений в $PATH local and global
https://translated.turbopages.org/proxy_u/en-ru.ru.4a6443bc-63bdac27-06c1f7ad-74722d776562/https/www.baeldung.com/linux/path-variable

#BASH
export test=<значение>
chmod +x имяфайла
chmod 755 /somefile
sudo -s  (ctrl+D)
gprep -r <>  | <> | <> поиск, в пайплайн поиска можно добавлять по ходу
man -k <keyword>   or help
at/atq/atrm crontab -e - sheduler for tasks (clear logs, backups)

#!/bin/sh
groupadd devops
useradd -g devops -p $(openssl passwd 172800) mikhailk
chage -d 0 mikhailk
echo mikhailk ALL=(ALL:ALL) ALL' >> /etc/sudoers

wget "RAWLINK"
wget <link> -P ~/dstr/;sudo apt-get install ~/dstr/<name of packedge>

#GIT
git config --list --show-origin    -- все настройки GIT

git config --global user.email "mk_0@bk.ru"
git config --global user.name "mikhailk"

git rm --cached NAME_REPO_GIT

git log --pretty=oneline
git checkout fix^ - переместить HEAD на родителя fix
git branch -f main fix~2 - переместить main на прародителя fix
git checkout -b fix ; git checkout main ; git checkout v1.0.0
git branch

git add .

git tag v1.0.0 ;  git tag -d v1.0.0 ; git push --delete v1.0.0

git remote set-url --add origin git@gitlab.com:Mikhail-K-devops/devops-netology.git
git remote add gitlab git@gitlab.com:Mikhail-K-devops/devops-netology.git  (ЛУЧШЕ ТАК)
git push origin main

git log --follow -p -- myfile Если вы хотите просмотреть все коммиты с изменениями конкретного файла, воспользуйтесь командой

git status

git commit -a -m "update 4.Virt.md"
git push
git clone git@github.com:Mikhail-K-devops/devops-netology.git

 git log --oneline
 git tag -a v00.00.00 adcf911
 git push origin v00.00.02 ИЛИ --tags
 git push origin --delete <tag>

# INTERESTING APP FOR REPO CLEAN and many others
sudo pip  install git-filter-repo
git filter-repo --invert-paths --force --path "~/devops-netology/sysadm-homeworks/02-git-04-tools/vagrant_2.3.4-1_amd64.deb"

#DOCKER

/home/mikhailk/devops-netology/dockerbuild.sh
nano /home/mikhailk/devops-netology/dockerbuild.sh
/opt/docker/nginxmk1# nano Dockerfile
/usr/share/nginx/html/index.html ?

# узнать версии образов в репозитарии докера
docker trust inspect nginx | grep "SignedTag" | awk -F'"' '{print $4}'

установка докер плагина для ансибл
https://docs.ansible.com/ansible/latest/collections/community/docker/docker_connection.html
ansible-galaxy collection install community.docker 

DOCKER INSTALL:
curl -fsSL https://get.docker.com -o get-docker.sh
$ sh get-docker.sh
usermod -aG docker $USER (чтобы без sudo а затем релогин) 00000000000000'



 docker login -u devmikhailk --password-stdin 
 WARNING! Using --password via the CLI is insecure. Use --password-stdin.
 WARNING! Your password will be stored unencrypted in /home/mikhailk/.docker/config.json.
 Configure a credential helper to remove this warning. See
 https://docs.docker.com/engine/reference/commandline/login/#credentials-store

systemctl enable docker ; service docker start (status)
docker image ls
docker run ; docker run -it ubuntu bash ; docker run -d nginx (запуск в фоновом режиме)
docker exec  (запуск команд в контейнере)
docker ps (-a)
docker stop distracted_elgamal (из поля NAMES)
docker rm (из поля NAMES)
docker rmi (удалит Images) docker system prune (удалит все неиспользуемые) ; -a -f ; --volume
docker logs --tail 1 ; -f  (из поля NAMES)

docker run: Запускает контейнер на основе образа.
    -d (detach): Запускает контейнер в фоновом режиме.
    -p (publish): Пробрасывает порты между хостом и контейнером.
    -v (volume): Монтирует директорию хоста в контейнер.
docker build: Создает образ на основе Dockerfile.
    -t (tag): Устанавливает тег для образа.
    -f (file): Указывает путь к Dockerfile.
docker pull: Загружает образ из реестра Docker Hub.
    (image_name:tag): Указывает конкретный образ для загрузки.
docker push: Отправляет образ в реестр Docker Hub.
    (image_name:tag): Указывает конкретный образ для отправки.
docker ps: Отображает запущенные контейнеры.
    -a (all): Показывает все контейнеры, включая остановленные.
docker stop: Останавливает контейнер.
    (container_id): Указывает конкретный контейнер для остановки.
docker rm: Удаляет контейнер.
    (container_id): Указывает конкретный контейнер для удаления.
docker rmi: Удаляет образ.
    (image_name:tag): Указывает конкретный образ для удаления.
docker rename <oldname> <newname>


# OTHER
docker build -t javdet/ansible:2.9.99 .

# внутри контейнера
docker exec debi01 sh -c 'echo "debi01" >> /data/3.txt'
